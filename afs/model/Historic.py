# 
# autogenerated by setup.py
# DO NOT EDIT!
#
from datetime import datetime
from afs.model.BaseModel import BaseModel
from afs.magix import *


#
# ExtDBServAttr
#

class historic_ExtDBServAttr(BaseModel):
    """
    Model object of extra Attributes to a server.
    IN DB_CACHE, this is stored in an own table
    """

    def __init__(self):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## id of server in DB Table tbl_dbserver
        self.server_db_id = None
        ## physical Location of the server (string)
        self.location = ""
        ## Owner of the server (string)
        self.owner = ""
        ## custom description about HW etc.
        self.description = ""

#
# ExtFileServAttr
#

class historic_ExtFileServAttr(BaseModel):
    """
    Model object of extra Attributes of a fileserver.
    IN DB_CACHE, this is stored in an own table
    """

    def __init__(self):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1
        ## id of server in DB Table tbl_servers
        self.server_db_id = None
        ## physical Location of the server (string)
        self.location = ""
        ## Owner of the server (string)
        self.owner = ""
        ## custom description about HW etc.
        self.description = ""

#
# ExtVolAttr
#

class historic_ExtVolAttr(BaseModel):
    """
    Model object of extra Attributes to a volume.
    IN DB_CACHE, this is stored in an own table
    """

    def __init__(self):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## ID of Volume, foreign key to volume-table
        ## SHOULD point to RWID
        self.vid = -1
        ## number of RO required for this volume, overrrides project
        self.num_min_copy = -1
        ## Owner of the volume (string)
        self.owner = ""
        ## json-encodedlist of projectIDs this Volume belongs to
        self.project_ids_js = '[]'
        self.project_ids = []
        ## if volume should stay on the present server.
        self.pinned_on_server = 0

#
# BosServer
#

class historic_BosServer(BaseModel):
    """
    Model object of a bosserver running on a host
    """

    def __init__(self):
        """
        initialize an empty object.
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1
        ## list of DNS-hostnames
        self.servernames = None
        self.servernames_js = ""
        ## list of ipaddrs
        self.ipaddrs = None
        self.ipaddrs_js = ""
        ## list of superusers
        self.superusers = None
        self.superusers_js = ""
        ## list of cell hosts (dbservers)
        self.db_servers = None
        self.db_servers_js = ""
        ## rxdebug version string and builddate
        self.version = ""
        self.build_date = ""
        ## Date of general restart Time
        self.general_restart_time = ""
        ## Date of newbinary restart Time
        self.newbinary_restart_time = ""
        ## list of attributes not to put into the DB
        ## these contain (lists of) independent objects
        ## or convenience attributes
        ## bnodes: list of BNode objects
        ## servername short for servernames[0]
        self.unmapped_attributes_list = ['bnodes', 'servername']

#
# PTDB
#

class historic_PTDB(BaseModel) :
    """
    Model for Protection Database.
    This defines a logical view on the DB.
    The single copies of it are defined in the
    DBServer model.
    """
    def __init__(self):
        """
        Initializes empty model object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## list of servers providing this DB
        self.dbservers_ipaddrs__js = "[]"
        self.dbservers_ipaddrs = []
        ## syncsite, master-server
        self.sync_server_ipaddrs = ""
        ## FIXME: add more attributes like e.g. num_groups
        ## DB-version
        self.ptdb_version = -1

#
# ExtPartAttr
#

class historic_ExtPartAttr(BaseModel):
    """
    model object of extra attributes for a partition.
    IN DB_CACHE, this is stored in an own table
    """

    def __init__(self) :
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ##  (fileserver_uuid,name) is foreign key to partition-table
        self.name = ""
        self.fileserver_uuid = ""
        ## Owner of the Partition (string)
        self.owner = ""
        ## json-encoded dict { "projectID" : "numVolumes" }
        ## showing ProjectIDs having numVolumes  volumes on that partition
        self.project_ids_js = '{}'
        self.project_ids = {}
        ## allocated (by quota) size in Kbytes
        self.allocated = -1
        ## stale_allocated, same as allocated,
        ## but for volumes which had not been accessed in $StaleTime days
        self.allocated_stale = -1
        ## number of volumes with unlimited quota
        self.unlimited_volumes = -1
        ## Total number of volumes
        self.num_vol_rw = -1
        self.num_vol_ro = -1
        self.num_vol_bk = -1
        self.num_vol_offline = -1

#
# CacheManager
#

class historic_CacheManager(object) :
    """
    empty Model for a CacheManager
    """
    def __init__(self):
        """
        Initializes empty shell
        """
        
        ## Cellname
        self.ws_cell = ""
        ## Aliases
        self.cell_aliases={}

#
# Partition
#

class historic_Partition(BaseModel):
    """
    Model object of the live-data of a partition
    """

    def __init__(self):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## UUID of fileserver
        self.fileserver_uuid = ""
        ## canonicalized partition name e.g "ad" for "/vicepad"
        self.name = ""
        ## free size in Kbytes
        self.free_kb = -1
        ## total size in Kbytes
        self.size_kb = -1
        ## used size in Kbytes
        self.used_kb = -1
        ## list of attributes not to put into the DB
        self.unmapped_attributes_list = [ "ExtAttr" ]

#
# Volume
#

class historic_Volume(BaseModel) :
    """
    Provides information about AFS-Volumes and methods to change them
    """

    def __init__(self) :
        """
        initializes to an empty Volume
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## name of the volume in the VLDB
        self.name = ''
        ## numerical ID of the volume, can be RW, RO or BK
        self.vid = -1
        ## ServerUUID where this volume is stored
        self.fileserver_uuid = ""
        ## Partitionname, where this volume is stored.
        self.partition = ""
        ## hostname, not to be used for queries
        self.servername = ""
        ## numerical ID of  RW Volume
        self.parent_id = 0
        ## numerical ID of Backup Volume
        self.backup_id = 0
        self.clone_id  = 0
        self.in_use = ""
        self.needs_salvage = ""
        self.destroy_me = ""
        self.type = ""
        self.creation_date = datetime.fromtimestamp(0)
        self.access_date = datetime.fromtimestamp(0)
        self.backup_date = datetime.fromtimestamp(0)
        self.copy_date = datetime.fromtimestamp(0)
        self.flags = 0
        self.diskused = -1
        self.maxquota = -1
        self.minquota = -1
        self.status = VolStatus.OK
        self.filecount = 0
        self.day_use  = 0
        self.week_use = 0
        self.spare2  = 0
        self.spare3  = 0
        ## list of attributes not to put into the DB
        self.unmapped_attributes_list =  ['ExtAttr']

#
# Project
#

class historic_Project(BaseModel):
    """
    Model object of  a Project :
    A project is a group of Volumes defined by the Volume names
    and size.
    A project then defines other attributes such as  (geographical) location,
    contact person, owner(organisation), on which server partition-pairs
    the volumes should reside.
    """

    def __init__(self) :
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## name
        self.name = ""
        ## list of regexes, json encoded
        self.volname_regex_js = "[]"
        self.volname_regex = []
        ## list of additional Volumenames, json encoded
        self.additional_volnames_js = "[]"
        self.additional_volnames = []
        ## list of excluded Volumenames , json encoded
        self.excluded_volnames_js = "[]"
        self.excluded_volnames = []
        ## minimum Size for a Volume
        self.min_size_kb = -1
        ## maximum Size for a volume
        self.max_size_kb = -1
        ## specificity can be used for project hierachies
        self.specificity = 0
        ## contact
        self.contact = ""
        ## owner
        self.owner = ""
        ## list of locationIDs for RW-Volumes, json encoded
        self.rw_locations_js = "[]"
        self.rw_locations = []
        ## list of locationIDs for RO-Volumes, json encoded
        self.ro_locations_js = "[]"
        self.ro_locations = []
        ## list of "server-uuid,partition" pairs for RW-Volumes, json encoded
        self.rw_serverparts_js = "[]"
        self.rw_serverparts = []
        ## list of "server-uuid,partition" pairs for RO-Volumes, json encoded
        self.ro_serverparts_js = ""
        self.ro_serverparts = []
        ## free form description
        self.description = ""
        ## minimum number of RO-replicas
        self.num_min_ro = 1

#
# BNode
#

class historic_BNode(BaseModel):
    """
    Model object of a bosserver child process (bnode)
    """

    def __init__(self, instance_name = "N/A", bnode_type = "N/A", bos_db_id = -1):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1
        ## DB-ID of owning bosserver
        self.bos_db_id = bos_db_id
        self.instance_name = instance_name
        self.bnode_type = bnode_type
        # FIXME : what to do with procs of type cron ?
        ## list of commands run for this bnode
        self.commands = ''
        self.commands_js = ''
        self.status = ''
        self.start_date = datetime.fromtimestamp(0)
        self.start_count = ''
        self.last_exit_date = datetime.fromtimestamp(0)
        self.notifier = ''
        self.error_stop  = ''
        self.core = ''
        self.error_exit_date = datetime.fromtimestamp(0)
        self.error_exit_due = ''
        self.error_exit_signal = ''
        self.error_exit_code = ''

#
# DBServer
#

class historic_DBServer(BaseModel):
    """
    Model object of a database-server
    """

    def __init__(self):
        """
        initialize an empty object.
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1
        ## for db index
        self.db_id = None
        ## list of DNS-hostnames
        self.servernames = None
        self.servernames_js = ""
        ## list of ipaddrs
        self.ipaddr = ""
        ## Flag if it is a clone or real db-server
        self.is_clone = True
        ## type of db : vldb or ptdb
        self.afsdb_type = ""
        ## local version of the DB
        self.local_afsdb_version = ""
        ## rxdebug version string 
        self.version = ""
        self.build_date = ""
        ## list of attributes not to put into the DB
        self.unmapped_attributes_list= ['BNode', 'ExtServAttr' ]

#
# FileServer
#

class historic_FileServer(BaseModel):
    """
    Model object of a fileserver 
    """

    def __init__(self):
        """
        initialize an empty object.
        Partitions are not in the same Table in DB_CACHE as
        Server, so the attribute 'partitions' will be inserted by the FsService
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## AFS Server UUID
        self.uuid = ""
        ## list of DNS-hostnames
        self.servernames_js = '[]'
        self.servernames = []
        ## list of ipaddrs
        self.ipaddrs_js = '[]'
        self.ipaddrs = []
        ## rxdebug version string 
        self.version = ""
        ## build-date of binary according to rxdebug
        self.build_date = ""
        ## list of attributes not to put into the DB
        self.unmapped_attributes_list = [ 'parts', 'ExtServAttr' ]

#
# Cell
#

class historic_Cell(BaseModel) :
    """
    empty Model for a Cell
    """
    def __init__(self):
        """
        Initializes empty shell
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1
        
        ## Database definitions
        ## Cellname
        self.name = ""
        ## VLDb-Version
        self.vldb_version = -1
        ## VLDb-syncsite, hostname
        self.vldb_sync_site = ""
        ## VLDB-State (aka "Recovery state")
        self.vldb_state = ""
        ## PTDB-Version
        self.ptdb_version = -1
        ## PTDB-syncsite, hostname
        self.ptdb_sync_site = ""
        ## PTDB-State (aka "Recovery state")
        self.ptdb_state = ""
        ## Number of users in PTDB
        self.num_users = -1
        ## Number of groups in PTDB
        self.num_groups = -1
        ## Total number of volumes
        self.num_vol_rw = -1
        self.num_vol_ro = -1
        self.num_vol_bk = -1
        self.num_vol_offline = -1
        ## List of DBServers (hostnames only)
        self.db_servers = []
        self.db_servers_js = ""
        ## List of FileServers (hostnames only)
        self.file_servers = []
        self.file_servers_js = ""
        ## List of Projects (names only)
        self.projects = []
        self.projects_js = ""
        ## Total Size, etc
        self.size_kb = -1
        self.used_kb = -1
        self.free_kb = -1
        self.allocated_kb = -1
        self.allocated_stale_kb = -1

#
# ProjectSpread
#

class historic_ProjectSpread(BaseModel):
    """
    Model object of the spread of a project :
    This is a helper table to show how many volumes of what size
    are stored on different server partition of a single project
    """

    def __init__(self):
        """
        initialize an empty object
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## DB ID of Project 
        self.project_id = -1
        ## UUID of FSServer
        self.fileserver_uuid = -1
        ## partition
        self.part = ""
        ## type of volumes
        self.vol_type = ""
        ## number of volumes of that type
        self.num_vol = -1
        ## total used kilobytes 
        self.used_kb = -1
        ## osd - cruft
        self.blocks_fs = -1
        self.blocks_osd_on = -1
        self.blocks_osd_off = -1

#
# VLDB
#

class historic_VLDB(BaseModel) :
    """
    empty model for volume Location Database.
    This defines a logical view on the DB.
    The single copies of it are defined in the
    DBServer model.
    """
    def __init__(self):
        """
        Initializes empty shell
        """
        BaseModel.__init__(self)
        ## pointer to current table entry
        self.real_db_id = -1

        ## list of servers providing this DB
        self.dbservers_ipaddrs_js = "[]"
        self.dbservers_ipaddrs = []
        ## syncsite, master-server
        self.sync_server_ipaddrs = ""
        ## FIXME: add more attributes like registered fileservers etc.
        ## DB-version
        self.vldb_version = -1
