Design decisions in this package

General
=======

 * use lowercase_with_underscore coding style now every where
  * use pylint with the configuration file given here to validate this.

 * the application has to run with sufficient token.

 * the userinterface is only the Service - Level

 * permissions are checked on the LLA - Level
 
 * Three ways to get data :
  * the DB_Cache can be considered as a cacheing proxy to the data
  * async getter methods from the live-cell
  * blocking getter methods from the live-cell

 * Two ways of manipulating the cell :
  * async (application needs to check Service, done by threads)
  * blocking 


LLA
===

 * Two ways of executing afs-commands :
  * normal exec() (default)
    * LLA return lists, dicts, bool or model-objects.
      * these objects do not need to have all attributes set.
        the service is required to fill in the gaps.
  * fully detached 
    * LLA return handle to async command.
    * provides methods to query status detached commands.
    * more than one command may be executed detached at one time.
    * it is up to the service to collect the pieces.

 * LLA always raises an execption on error

 * LLAs are distinguished on the RPC-Level.

 * LLA casts variables to the correct datatype ( e.g. volume_id are integer )


Service
=======

 * A service returns an object, list of objects or NONE (if the request was not really invalid)

   * Objects returned by a service can be lazy (future feature)
  
   * Objects are by default first looked up in the cache and returned if they are not too old.

 * A service method accepts an object or a unique attribute of that object as keyword

 * A service may throw an exception (e.g. wrong hostname used)

 * Direct changes of object-attributes cause undefined behaviour. 


Unit-Tests
==========

 * each LLA and service has to have to unit-test.

Documentation
=============

 * pydoc is used for creating documentation

Database Cache
==============

 * expiry-time of an entry in the cache can be configured by table.

usage of variables
==================

 * Partitions are used canonicalized only (i.e. one or two letters)

 * Internally, servers are adressed by UUID

 * Timestamps are datetime.

